// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"DRX_Test/internal/dto/pagedto"
	"DRX_Test/internal/entity"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProductRepository creates a new instance of MockProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductRepository {
	mock := &MockProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductRepository is an autogenerated mock type for the ProductRepository type
type MockProductRepository struct {
	mock.Mock
}

type MockProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductRepository) EXPECT() *MockProductRepository_Expecter {
	return &MockProductRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) Create(ctx context.Context, product *entity.Product) (*entity.Product, error) {
	ret := _mock.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Product) (*entity.Product, error)); ok {
		return returnFunc(ctx, product)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Product) *entity.Product); ok {
		r0 = returnFunc(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entity.Product) error); ok {
		r1 = returnFunc(ctx, product)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - product
func (_e *MockProductRepository_Expecter) Create(ctx interface{}, product interface{}) *MockProductRepository_Create_Call {
	return &MockProductRepository_Create_Call{Call: _e.mock.On("Create", ctx, product)}
}

func (_c *MockProductRepository_Create_Call) Run(run func(ctx context.Context, product *entity.Product)) *MockProductRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Product))
	})
	return _c
}

func (_c *MockProductRepository_Create_Call) Return(product1 *entity.Product, err error) *MockProductRepository_Create_Call {
	_c.Call.Return(product1, err)
	return _c
}

func (_c *MockProductRepository_Create_Call) RunAndReturn(run func(ctx context.Context, product *entity.Product) (*entity.Product, error)) *MockProductRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// IsExist provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) IsExist(ctx context.Context, name string) (bool, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductRepository_IsExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExist'
type MockProductRepository_IsExist_Call struct {
	*mock.Call
}

// IsExist is a helper method to define mock.On call
//   - ctx
//   - name
func (_e *MockProductRepository_Expecter) IsExist(ctx interface{}, name interface{}) *MockProductRepository_IsExist_Call {
	return &MockProductRepository_IsExist_Call{Call: _e.mock.On("IsExist", ctx, name)}
}

func (_c *MockProductRepository_IsExist_Call) Run(run func(ctx context.Context, name string)) *MockProductRepository_IsExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProductRepository_IsExist_Call) Return(b bool, err error) *MockProductRepository_IsExist_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockProductRepository_IsExist_Call) RunAndReturn(run func(ctx context.Context, name string) (bool, error)) *MockProductRepository_IsExist_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockProductRepository
func (_mock *MockProductRepository) List(ctx context.Context, pageInfo *pagedto.PageSortDto) ([]*entity.Product, int64, error) {
	ret := _mock.Called(ctx, pageInfo)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entity.Product
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pagedto.PageSortDto) ([]*entity.Product, int64, error)); ok {
		return returnFunc(ctx, pageInfo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pagedto.PageSortDto) []*entity.Product); ok {
		r0 = returnFunc(ctx, pageInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pagedto.PageSortDto) int64); ok {
		r1 = returnFunc(ctx, pageInfo)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *pagedto.PageSortDto) error); ok {
		r2 = returnFunc(ctx, pageInfo)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProductRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProductRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - pageInfo
func (_e *MockProductRepository_Expecter) List(ctx interface{}, pageInfo interface{}) *MockProductRepository_List_Call {
	return &MockProductRepository_List_Call{Call: _e.mock.On("List", ctx, pageInfo)}
}

func (_c *MockProductRepository_List_Call) Run(run func(ctx context.Context, pageInfo *pagedto.PageSortDto)) *MockProductRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pagedto.PageSortDto))
	})
	return _c
}

func (_c *MockProductRepository_List_Call) Return(products []*entity.Product, n int64, err error) *MockProductRepository_List_Call {
	_c.Call.Return(products, n, err)
	return _c
}

func (_c *MockProductRepository_List_Call) RunAndReturn(run func(ctx context.Context, pageInfo *pagedto.PageSortDto) ([]*entity.Product, int64, error)) *MockProductRepository_List_Call {
	_c.Call.Return(run)
	return _c
}
