// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"DRX_Test/internal/dto/pagedto"
	"DRX_Test/internal/dto/productdto"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProductUsecase creates a new instance of MockProductUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductUsecase {
	mock := &MockProductUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductUsecase is an autogenerated mock type for the ProductUsecase type
type MockProductUsecase struct {
	mock.Mock
}

type MockProductUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductUsecase) EXPECT() *MockProductUsecase_Expecter {
	return &MockProductUsecase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProductUsecase
func (_mock *MockProductUsecase) Create(ctx context.Context, req *productdto.CreateProductRequest) (*productdto.ProductResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *productdto.ProductResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *productdto.CreateProductRequest) (*productdto.ProductResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *productdto.CreateProductRequest) *productdto.ProductResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*productdto.ProductResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *productdto.CreateProductRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductUsecase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProductUsecase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockProductUsecase_Expecter) Create(ctx interface{}, req interface{}) *MockProductUsecase_Create_Call {
	return &MockProductUsecase_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockProductUsecase_Create_Call) Run(run func(ctx context.Context, req *productdto.CreateProductRequest)) *MockProductUsecase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*productdto.CreateProductRequest))
	})
	return _c
}

func (_c *MockProductUsecase_Create_Call) Return(productResponse *productdto.ProductResponse, err error) *MockProductUsecase_Create_Call {
	_c.Call.Return(productResponse, err)
	return _c
}

func (_c *MockProductUsecase_Create_Call) RunAndReturn(run func(ctx context.Context, req *productdto.CreateProductRequest) (*productdto.ProductResponse, error)) *MockProductUsecase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockProductUsecase
func (_mock *MockProductUsecase) List(ctx context.Context, pageInfo *pagedto.PageSortDto) ([]productdto.ProductResponse, *pagedto.PageInfoDto, error) {
	ret := _mock.Called(ctx, pageInfo)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []productdto.ProductResponse
	var r1 *pagedto.PageInfoDto
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pagedto.PageSortDto) ([]productdto.ProductResponse, *pagedto.PageInfoDto, error)); ok {
		return returnFunc(ctx, pageInfo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pagedto.PageSortDto) []productdto.ProductResponse); ok {
		r0 = returnFunc(ctx, pageInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productdto.ProductResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pagedto.PageSortDto) *pagedto.PageInfoDto); ok {
		r1 = returnFunc(ctx, pageInfo)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagedto.PageInfoDto)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *pagedto.PageSortDto) error); ok {
		r2 = returnFunc(ctx, pageInfo)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProductUsecase_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockProductUsecase_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - pageInfo
func (_e *MockProductUsecase_Expecter) List(ctx interface{}, pageInfo interface{}) *MockProductUsecase_List_Call {
	return &MockProductUsecase_List_Call{Call: _e.mock.On("List", ctx, pageInfo)}
}

func (_c *MockProductUsecase_List_Call) Run(run func(ctx context.Context, pageInfo *pagedto.PageSortDto)) *MockProductUsecase_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pagedto.PageSortDto))
	})
	return _c
}

func (_c *MockProductUsecase_List_Call) Return(productResponses []productdto.ProductResponse, pageInfoDto *pagedto.PageInfoDto, err error) *MockProductUsecase_List_Call {
	_c.Call.Return(productResponses, pageInfoDto, err)
	return _c
}

func (_c *MockProductUsecase_List_Call) RunAndReturn(run func(ctx context.Context, pageInfo *pagedto.PageSortDto) ([]productdto.ProductResponse, *pagedto.PageInfoDto, error)) *MockProductUsecase_List_Call {
	_c.Call.Return(run)
	return _c
}
